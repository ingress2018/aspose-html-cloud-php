<?php
/**
 * OcrApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Client\Invoker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.HTML for Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Client\Invoker\Api;

use \Client\Invoker\Config;
use \Client\Invoker\ApiException;
use \Client\Invoker\ObjectSerializer;
use Aspose\Storage\StorageApi;

/**
 * OcrApiTest Class Doc Comment
 *
 * @category Class
 * @package  Client\Invoker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OcrApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Ocr Api object
     */
    private static $api;

    /**
     * Storage Api
     */
    private static $storage;

    /**
     * Folder with test samples
     */
    private static $testFolder;

    /**
     * Folder for storage result
     */
    private static $testResult;


    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$api = new OcrApi();
        self::$storage = new StorageApi();
        self::$storage->apiClient->apiKey = self::$api->config['apiKey'];
        self::$storage->apiClient->appSid = self::$api->config['appSID'];
        self::$storage->apiClient->apiServer = self::$api->config['basePath'];
        self::$testFolder = realpath(__DIR__ . '/../..') . self::$api->config['testData'];
        self::$testResult = realpath(__DIR__ . '/../..') . self::$api->config['testResult'];
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for ocrGetRecognizeAndImportToHtml
     * @dataProvider providerOcrGetRecognizeAndImportToHtml
     *
     * Recognize text from the image file in the storage and import it to HTML format..
     *
     */
    public function testOcrGetRecognizeAndImportToHtml($name, $ocr_engine_lang = 'en', $folder = null, $storage = null)
    {
        $folder = $folder ?: self::$api->config['remoteFolder'];

        // Upload file to storage
        self::$storage->PutCreate($folder . "/" . $name, null, null, self::$testFolder . $name);

        //Assert - file exist
        $res = self::$storage->GetIsExist($folder . "/" . $name, null, null);
        $this->assertTrue($res->FileExist->IsExist,"Error occured while uploading document");

        //Request to server Api
        $result = self::$api->OcrGetRecognizeAndImportToHtml($name, $ocr_engine_lang , $folder, $storage);

        $this->assertTrue($result->isFile(),"Error result after recognize");
        $this->assertTrue($result->getSize() > 0,"Zero result");

        //Copy result to testFolder
        copy($result->getRealPath(), self::$testResult . $name . "_" . $ocr_engine_lang .".html");
    }

    public function providerOcrGetRecognizeAndImportToHtml()
    {
        return [
            ["test_ocr.png","en"],
            ["test_ocr.jpg","en"]
        ];
    }


    /**
     * Test case for ocrGetRecognizeAndTranslateToHtml
     *
     * @dataProvider providerOcrGetRecognizeAndTranslateToHtml
     *
     * Recognize text from the image file in the storage, import it to HTML format and translate to specified language..
     *
     */
    public function testOcrGetRecognizeAndTranslateToHtml($name, $src_lang, $res_lang, $folder = null, $storage = null)
    {
        $folder = $folder ?: self::$api->config['remoteFolder'];

        // Upload file to storage
        self::$storage->PutCreate($folder . "/" . $name, null, null, self::$testFolder . $name);

        //Assert - file exist
        $res = self::$storage->GetIsExist($folder . "/" . $name, null, null);
        $this->assertTrue($res->FileExist->IsExist,"Error occured while uploading document");

        //Request to server Api
        $result = self::$api->OcrGetRecognizeAndTranslateToHtml($name, $src_lang, $res_lang, $folder, $storage);

        $this->assertTrue($result->isFile(),"Error result after recognize");
        $this->assertTrue($result->getSize() > 0,"Zero result");

        //Copy result to testFolder
        copy($result->getRealPath(), self::$testResult . $name . "_" . $src_lang . "_". $res_lang . ".html");
    }

    public function providerOcrGetRecognizeAndTranslateToHtml()
    {
        return [
            ["test_ocr.png","en","fr"],
            ["test_ocr.jpg","en","de"]
        ];
    }
}
